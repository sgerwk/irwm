.TH irwm 1 "Aug 9, 2017"
.
.
.
.SH NAME

irwm - a window manager that can be controlled from an infrared remote
.
.
.
.SH SYNOPSIS

.PD 0
\fBxinix /path/to/irwm\fP [\fIOPTIONS\fP]
.P
\fBstartx /path/to/irwm\fP [\fIOPTIONS\fP]
.PD
.
.
.
.SH DESCRIPTION

.I
irwm
is a window manager that shows one window at time in full-screen. This
simplicity allows for input devices with a limited number of keys like consumer
electronics (infrared) remotes.
.SH OPTIONS
.TP
.B
-l
receive commands via \fBlirc(4)\fP
.TP
.B
-q
quit when the last window is closed
.TP
.B
-c
ask for confirmation on quit unless all windows are already closed
.TP
.B
-s
single key mode (see below)
.TP
.B
-r
raise mode (see INTERNALS, below); this is the default, and is also necessary
to make gimp(1) work in irwm
.TP
.B
-u
unmap mode (see INTERNALS, below)
.TP
\fB-display \fIdisplay\fP
connect to given X server
.TP
\fB-geometry \fIWxH+X+Y\fP
make all windows W large, H tall and positioned at X,Y; this is useful if the
video device does not show the whole framebuffer, like in overscanning
.TP
\fB-fn \fIfont\fP
use the given font for the window and program lists
.TP
\fB-lircrc \fIfile\fP
use \fIfile\fP as the lirc configuration file instead of the default
\fI$HOME/.lircrc\fP
.TP
\fB-log \fIlogfile\fP
log to file \fIlogfile\fP instead of the default "irwm.log";
pass "-" to log to stdout and "/dev/null" to disable logging
.
.
.
.SH OPERATION

The window manager shows one window at time in full screen. The user can switch
among them, close one and open new ones. These operations are done via
commands received from either a keyboard or a \fBlirc(4)\fP remote. The
following description only specifies the keystroke that generates each command;
the section \fBLIRC CONFIGURATION\fP explains how to generate them from remote
controls.

.TP
.I
NEXTPANEL
(Alt-Right)
switch to the next window
.TP
.I
PREVPANEL
(Alt-Left)
switch to the previos window
.TP
.I
RESTART
(Control-Shift-Alt-Tab)
close all windows and restart irwm
.TP
.I
QUIT
(Control-Shift-Tab)
close irwm
.TP
.I
PANELWINDOW
(Alt-Tab)
show the list of windows currently open; the user can move by UPWINDOW and
DOWNWINDOW, close the list by HIDEWINDOW, OKWINDOW or PANELWINDOW again, close
a window by KOWINDOW, move it at the end by ENDWINDOW
.TP
.I
PROGSWINDOW
(Control-Tab)
shows a list of programs; the user can move by UPWINDOW and DOWNWINDOW, close
the list by HIDEWINDOW or PROGSWINDOW again, execute a program by OKWINDOW; the
programs in the list can be specified in the configuration file
.TP
.I
UPWINDOW
(cursor down)
in the list of windows or programs, move up
.TP
.I
DOWNWINDOW
(cursor up)
in the list of windows or programs, move down
.TP
.I
HIDEWINDOW
(Escape)
close the list of windows or programs
.TP
.I
OKWINDOW
(Return)
in the list of windows or programs, respectively select the window or execute
the program
.TP
.I
KOWINDOW
(c)
in the list of windows, close the currently active window
.TP
.I
ENDWINDOW
(e)
in the list of windows, move the currently active window at the end
.TP
.I
NUMWINDOW(n)
(1-9)
select item number \fIn\fP in the list of prorgams or windows

.P
In single key mode (option -s), PANELWINDOW rotates among the window list,
the program list and no list. This requires a single key to operate the
window manager since the keys to move up, move down, select and close can be
used for other functions when the window and program list are not active.
.
.
.
.SH CONFIGURATION

On startup, irwm reads \fI$HOME/.irwmrc\fP and, if this file does not exists,
\fI/etc/irwmrc\fP. An example is:

.nf
    startup xterm
    startup xcalc
    startup xclock

    program xterm xterm
    program calculator xcalc
    program fonts xfontsel
    program browser firefox
    program resize
    # program restart
    program quit

    font Arial-15:bold

    quitonlastclose
    confirmquit

    echo end of configuration file
.fi

A line like "\fIstartup xterm\fP" makes xterm being executed at startup.

A line like "\fIprogram calculator xcalc\fP" adds a line "calculator" to
the list of programs that is shown on PROGSWINDOW (e.g. Control-Tab)
so the user can execute xcalc.
If the keyword "\fIprogram\fP" is followed by one word instead of two, it is
a command to irwm itself, either \fIresize\fP (which makes the current
window as large as the screen, in case it dared making itself smaller) or
\fIquit\fP (to terminate irwm).
Either way, the first letter of the program is a shortcut for it.

No program argument can be given in a \fIstartup\fP or \fIprogram\fP line.

The line "\fIfont Arial-15:bold\fP" tells the font to use in the window and
program lists.

The lines "\fIquitonlastclose\fP" and "\fIconfirmquit\fP" are respectively
equivalent to the commandline options \fI-q\fP and \fI-c\fP: close the window
manager when the last window is closed and ask for confirmation when quitting
unless all windows are already closed.

The "\fIecho ...\fP" line has the usual meaning.

Lines starting with '#' are comments.
.
.
.
.SH LIRC CONFIGURATION

To control irwm from an infrared remote, \fBlircd(8)\fP has to be configured to
translate some remote keys into the irwm commands:
\fINEXTPANEL\fP,
\fIPREVPANEL\fP,
\fIQUIT\fP,
\fIPANELWINDOW\fP,
\fIPROGSWINDOW\fP,
\fIUPWINDOW\fP,
\fIDOWNWINDOW\fP,
\fIHIDEWINDOW\fP,
\fIOKWINDOW\fP,
\fIKOWINDOW\fP, and
\fIENDWINDOW\fP.
This is done via a \fBlircrc(5)\fP file. As an example,
\fI~/.lircrc\fP may contain:

.nf
    begin
        prog = IRWM
        button = KEY_RED
        config = NEXTPANEL
    end
    
    begin
        prog = IRWM
        button = KEY_BLUE
        config = PREVPANEL
    end
.fi

A begin-end block is required for each key. The prog field is IRWM. The button
field is the key in the remote (one of the keys in the \fBlircd.conf(5)\fP
configuration file). The config field is the irwm command (one among 
\fINEXTPANEL\fP, \fIPREVPANEL\fP, etc.)

In this example, the red key in the remote makes irwm switch to the next
window, the blue key to the previous.

Such a lircrc file can be checked without a remote by running lircd with the
\fB-a\fP option and then simulating each key by \fBirsend(1)\fP. For the
\fI.lircrc\fP above, the following makes irwm switch to the next window, wait a
second and then switch back to the previous.

.nf
    irsend SIMULATE '000000000 00 KEY_RED simulated'
    sleep 1
    irsend SIMULATE '000000000 00 KEY_BLUE simulated'
.fi
.
.
.
.
.SH BUGS

No program argument can be specified in the irwmrc file.

The log file could be specified in the irwmrc file, but this is not currently
possible because logging begins before opening the irwmrc file.

The keystrokes cannot be changed other than editing the program source.

Window names are assumed to be ascii. They are only updated when the window
list is popped up and when moving in it. If a window changes its title while
the window list is active, its title is not updated in it.

There is no provision for ordering windows. Every new window is placed at the
end of the list. Yet, a program occurring later in \fIirwmrc\fP may show up
earlier in the list.

If a specific application is supposed to always be
presented to the user at start-up, it has to be the only one launched by
irwmrc. The user may then run other applications via the program list
(\fIPROGSWINDOW\fP).

In raise mode, the WM_STATE should change to NormalState only if not already.
.
.
.SH INTERNALS

Every time an application tries to map a new top-level window that has neither
the override_redirect flag nor the transient-for WM hint, irwm reparents it to
a new window it creates for this purpose. This new window is called a
\fIpanel\fP in the sources. Its size is the same of the root window, and the
window it contains is resized to that size.

Besides the keyboard and the remote, commands can be given to irwm by sending a
ClientMessage with type \fI"IRWM"\fP, format 32 and the command number as its
first data element to the root window. Actually, this is how lirc keystrokes
are translated to commands, by a process forked by irwm at startup. The command
numbers are:

.nf
#define NOCOMMAND    0		/* no command */
#define NEXTPANEL    1		/* switch to next window */
#define PREVPANEL    2		/* switch to previous window */
#define QUIT         3		/* quit irwm */

#define PANELWINDOW 10		/* show the window list */
#define PROGSWINDOW 11		/* show the program list */

#define UPWINDOW    20		/* up in the list */
#define DOWNWINDOW  21		/* down in the list */
#define HIDEWINDOW  22		/* hide both lists */
#define OKWINDOW    23		/* select the current item in the list */
#define KOWINDOW    24		/* close the current window */
#define ENDWINDOW   25		/* move currently active panel at end */

#define NUMWINDOW(n) (100 + (n))	/* select entry n in the list */
.fi

When switching to a new panel, irwm either unmaps the previous or just covers
it with the new one; these are the unmap (-u) and raise (-r) modes. In the
first case, the program controlling the previous window perceives a change
similar to an iconization; in the second, it perceives as if the user has just
selected a different window but the previous is still on the screen.
.
.
.
.SH POSSIBLE DEVELOPEMENTS

The configuration file may specify the size for some windows, depending on the 
window name (\fIWM_NAME\fP property),
class (\fIWM_CLASS\fP) or
program (\fIWM_COMMAND\fP).

An option could make NEXTPANEL and PREVPANEL to ``fall off'' to the next or
previous virtual terminal when at the end of the window list, instead of
rotating among the windows.
.
.
.
.SH SEE ALSO
wm2(1), fvwm(1)

